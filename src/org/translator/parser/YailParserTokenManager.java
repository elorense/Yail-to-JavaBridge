/* Generated By:JavaCC: Do not edit this line. YailParserTokenManager.java */
//AppComponent, has hashmap of String, String; key: method, value: actual value of method.
//ArrayList<CodeBlock> ?? 

package org.translator.parser;
import org.translator.java.AppComponent;
import java.util.HashMap;
import java.util.ArrayList;
import org.translator.java.JVar;
import org.translator.java.CodeBlock;
import org.translator.java.ComponentCall;
import org.translator.java.IfStatement;
import org.translator.java.ForEach;
import org.translator.java.ForRange;
import org.translator.java.WhileLoop;
import org.translator.java.Method;

/** Token Manager. */
public class YailParserTokenManager implements YailParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000000L) != 0L)
            return 25;
         if ((active1 & 0x400002000001000L) != 0L)
            return 4;
         if ((active0 & 0x200L) != 0L)
            return 23;
         if ((active0 & 0x6bc6ef5dff9ffdc0L) != 0L || (active1 & 0xffffcfffffe7f0L) != 0L)
         {
            jjmatchedKind = 120;
            return 26;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x8L) != 0L)
            return 27;
         return -1;
      case 1:
         if ((active0 & 0x6bc6cf5dff9ffdc0L) != 0L || (active1 & 0xffffcfffffe7f0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
            return 26;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x200000000000L) != 0L)
            return 26;
         return -1;
      case 2:
         if ((active0 & 0x800040000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 15;
         }
         if ((active0 & 0x68864f5c239ffd80L) != 0L || (active1 & 0xffffcfffffe7f0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 26;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x34000019c000040L) != 0L)
            return 26;
         return -1;
      case 3:
         if ((active0 & 0x6882405c399ffc80L) != 0L || (active1 & 0xffffc7fffc07f0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 3;
            return 26;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x4000100000000L) != 0L || (active1 & 0x20000L) != 0L)
            return 26;
         if ((active0 & 0x8f0042000100L) != 0L || (active1 & 0x80001e000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 3;
            return 15;
         }
         return -1;
      case 4:
         if ((active0 & 0x6080cf046201dd80L) != 0L || (active1 & 0xffff880001e400L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
            return 15;
         }
         if ((active0 & 0x8020058199e0000L) != 0L || (active1 & 0x7fffc03f0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
            return 26;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x2000L) != 0L || (active1 & 0x4000000000L) != 0L)
            return 26;
         return -1;
      case 5:
         if ((active0 & 0x6080cf04621fdd80L) != 0L || (active1 & 0xffff880001e400L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 15;
         }
         if ((active0 & 0x2005819800000L) != 0L || (active1 & 0x7fffc03f0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 26;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 26;
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active1 & 0xa00000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x2004001800000L) != 0L || (active1 & 0x110L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 26;
         }
         if ((active0 & 0x6080c7147a1fdd80L) != 0L || (active1 & 0xffff8fff5de4e0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 15;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 15;
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x800000000L) != 0L || (active1 & 0x200L) != 0L)
            return 26;
         return -1;
      case 7:
         if ((active1 & 0xa00000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L)
            return 15;
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
            return 26;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 26;
         if ((active0 & 0x6082c7147b9fdd80L) != 0L || (active1 & 0xffff8fff5d64e0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 7;
            return 15;
         }
         return -1;
      case 8:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x6082c7147a1fdd80L) != 0L || (active1 & 0xffff8fff5d64e0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 8;
            return 15;
         }
         if ((active1 & 0x100L) != 0L)
            return 26;
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         return -1;
      case 9:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x608247107a1fdd80L) != 0L || (active1 & 0xfffb8fff5d60e0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 9;
            return 15;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x400L) != 0L)
            return 15;
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         return -1;
      case 10:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x32000000L) != 0L || (active1 & 0xc00010000L) != 0L)
            return 15;
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         if ((active0 & 0x60824710481fdd80L) != 0L || (active1 & 0xfffa83ff5c60e0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 10;
            return 15;
         }
         return -1;
      case 11:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x608206104004d100L) != 0L || (active1 & 0xfffa83c15c60e0L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 11;
            }
            return 15;
         }
         if ((active0 & 0x4100081b0c80L) != 0L || (active1 & 0x3e000000L) != 0L)
            return 15;
         if ((active0 & 0x10000000000000L) != 0L)
            return 27;
         return -1;
      case 12:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x60800610401cc000L) != 0L || (active1 & 0xfffa83fd0820e0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 12;
            return 15;
         }
         if ((active0 & 0x2000000001100L) != 0L || (active1 & 0x444000L) != 0L)
            return 15;
         return -1;
      case 13:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x60000610401cc000L) != 0L || (active1 & 0xffea83fd0820a0L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 13;
            return 15;
         }
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x100000000040L) != 0L)
            return 15;
         return -1;
      case 14:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x60000210401cc000L) != 0L || (active1 & 0xf7ea83fd002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 14;
            return 15;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x80000000800a0L) != 0L)
            return 15;
         return -1;
      case 15:
         if ((active0 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x60000210401cc000L) != 0L || (active1 & 0xf7aa833d002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 15;
            return 15;
         }
         if ((active1 & 0x4000c0000000L) != 0L)
            return 15;
         return -1;
      case 16:
         if ((active0 & 0x600002004018c000L) != 0L || (active1 & 0xf722833d002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 16;
            return 15;
         }
         if ((active0 & 0x1000040000L) != 0L || (active1 & 0x80000000000L) != 0L)
            return 15;
         return -1;
      case 17:
         if ((active1 & 0x20001000000L) != 0L)
            return 15;
         if ((active0 & 0x600002004018c000L) != 0L || (active1 & 0xf720833c002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 17;
            return 15;
         }
         return -1;
      case 18:
         if ((active0 & 0x20040184000L) != 0L || (active1 & 0xd7208338002000L) != 0L)
         {
            if (jjmatchedPos != 18)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 18;
            }
            return 15;
         }
         if ((active0 & 0x6000000000008000L) != 0L || (active1 & 0x20000004000000L) != 0L)
            return 15;
         return -1;
      case 19:
         if ((active0 & 0x4000000040184000L) != 0L || (active1 & 0x97208038002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 19;
            return 15;
         }
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x40000300000000L) != 0L)
            return 15;
         return -1;
      case 20:
         if ((active0 & 0x4000000040180000L) != 0L || (active1 & 0x87208020002000L) != 0L)
         {
            if (jjmatchedPos != 20)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 20;
            }
            return 15;
         }
         if ((active0 & 0x4000L) != 0L || (active1 & 0x10000018000000L) != 0L)
            return 15;
         return -1;
      case 21:
         if ((active0 & 0x4000000000180000L) != 0L || (active1 & 0x4000010002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 21;
            return 15;
         }
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x83208020000000L) != 0L)
            return 15;
         return -1;
      case 22:
         if ((active0 & 0x100000L) != 0L)
            return 15;
         if ((active0 & 0x4000000000080000L) != 0L || (active1 & 0x4000010002000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 22;
            return 15;
         }
         return -1;
      case 23:
         if ((active0 & 0x4000000000080000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 23;
            return 15;
         }
         if ((active1 & 0x4000000002000L) != 0L)
            return 15;
         return -1;
      case 24:
         if ((active0 & 0x4000000000080000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 24;
            return 15;
         }
         return -1;
      case 25:
         if ((active0 & 0x4000000000080000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 25;
            return 15;
         }
         return -1;
      case 26:
         if ((active0 & 0x4000000000080000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 26;
            return 15;
         }
         return -1;
      case 27:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 27;
            return 15;
         }
         if ((active0 & 0x80000L) != 0L || (active1 & 0x10000000L) != 0L)
            return 15;
         return -1;
      case 28:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 28;
            return 15;
         }
         return -1;
      case 29:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 29;
            return 15;
         }
         return -1;
      case 30:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 30;
            return 15;
         }
         return -1;
      case 31:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 31;
            return 15;
         }
         return -1;
      case 32:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 32;
            return 15;
         }
         return -1;
      case 33:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 33;
            return 15;
         }
         return -1;
      case 34:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 34;
            return 15;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400002000001000L);
      case 39:
         return jjStartNfaWithStates_0(0, 9, 23);
      case 40:
         return jjStopAtPos(0, 53);
      case 41:
         return jjStopAtPos(0, 75);
      case 42:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 43:
         return jjStopAtPos(0, 64);
      case 45:
         return jjStartNfaWithStates_0(0, 58, 25);
      case 59:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 60:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 33);
      case 62:
         return jjStopAtPos(0, 44);
      case 92:
         return jjStopAtPos(0, 39);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1dc0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x21ec000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x5c800000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x5800000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0xf0000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe00000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x46000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xb80000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x3e0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffffe000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x420010000L, 0xffff8000000400L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 59:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000042101c000L, active1, 0xffff88000004e0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000080L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20f001c802000L, active1, 0xe300L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 26);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000000000000L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000001e0000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x840005842000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000400L, active1, 0L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L, active1, 0x7fffc0000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0L);
      case 124:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040000000L, active1, 0L);
      case 59:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000001800L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000001000100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L, active1, 0L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x802000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400420010400L, active1, 0xffffc000000400L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000100e0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000001e0080L, active1, 0x10L);
      case 112:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x5800000000L, active1, 0x7fffe0000L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000002000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xf0000000000L, active1, 0xe000L);
      case 120:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0xf0002000100L, active1, 0x80001e000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000019002000L, active1, 0x7fffc0000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x42001c000L, active1, 0xffffc000000400L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000001000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000800000001c00L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000001e0080L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 26);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 26);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x608040042001cc80L, active1, 0xffff8000000400L);
      case 46:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x5801000000L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000100L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x800010000L);
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000009e0000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x310L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000L, active1, 0x7fffc0000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xe0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000001e1000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x6002080000000000L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800014000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000c80L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1a800000L, active1, 0x10800010010L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x7fffc0000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0xfffe8000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0xe0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4001000000L, active1, 0x2100L);
      case 111:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x410000000000L, active1, 0x600L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x41040000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000008000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x1018000000L, active1, 0x7ff5c00e0L);
      case 60:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 62:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x90060000048000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0x2100L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0x40010c80L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x4002000000L, active1, 0x800010000L);
      case 104:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0xfffe8000004000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000010000004000L, active1, 0x400L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x19a0000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 33:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000001800000L, active1, 0x2000L);
      case 63:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(7, 85);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(7, 87);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1a0000L, active1, 0x80000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0x800008001000L, active1, 0x100100L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0xc80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80020000018000L, active1, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0xe008000400000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000040100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40042000000L, active1, 0x801010000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xfffe80fe004080L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x700000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000400L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0x4000L);
      case 62:
         return jjMoveStringLiteralDfa9_0(active0, 0x1800000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10002000000L, active1, 0x801410080L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000001000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x90000000018000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0x440L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x410000100L, active1, 0x300080000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x44000L, active1, 0x3e040000L);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0x88000001a0c80L, active1, 0x400000020L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000440000000000L, active1, 0xfffe8040000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000008000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x88061000008000L, active1, 0xfffa8300000000L);
      case 63:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(9, 47);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(9, 106);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0x40000020L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L);
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 15);
         return jjMoveStringLiteralDfa10_0(active0, 0x21000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0xa1a0c80L, active1, 0x800010000L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10400000010000L, active1, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000040000L, active1, 0x1003e000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0x480000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1140000L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 15);
         return jjMoveStringLiteralDfa10_0(active0, 0x10010801000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L);
      case 63:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(10, 104);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0x88000000000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000020L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 15);
         return jjMoveStringLiteralDfa11_0(active0, 0xe0000000011a1d80L, active1, 0x42040L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x6000000000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000400000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L, active1, 0x820003e000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x82000000000000L, active1, 0x400101000000L);
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 15);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 98, 15);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x8014000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L, active1, 0x10000000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x1000040000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 15);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 80, 15);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 99, 15);
         return jjMoveStringLiteralDfa11_0(active0, 0x10020000000000L, active1, 0x20000080000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0xc0000000180000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L, active1, 0x1080000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L, active1, 0x8000000000L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 46, 15);
         return jjMoveStringLiteralDfa12_0(active0, 0x1000005000L, active1, 0x21c20000000000L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 15);
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0x10000000000000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x180100L, active1, 0x8200000040000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xc0100100000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80200000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x6000000040008000L, active1, 0x6000000006000L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 7, 15);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 10, 15);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 11, 15);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 15);
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x10020000000000L, active1, 0xfc400020L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0xa000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 40, 15);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(12, 52);
         break;
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x6000000000180000L, active1, 0xc000003c000000L);
      case 63:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(12, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000040000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0x10000001002000L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 82, 15);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8008000000000L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 49, 15);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc0L);
      case 104:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 86, 15);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x808000L, active1, 0x80020L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 78, 15);
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0x1800000000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000004000L, active1, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x6000000000000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x180200000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L, active1, 0x80000000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 12, 15);
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0x200040000000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 15);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20020000000000L);
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0x20028040000000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L, active1, 0x3c000000L);
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xc0000000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0x8280301002080L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0x80000000L);
      case 107:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000000000000L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L, active1, 0x6000000000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L, active1, 0x1000000000020L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(13, 70, 15);
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x6000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 55, 15);
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000044000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x180000L, active1, 0L);
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 108, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L, active1, 0x16000001002000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x6000000040000000L, active1, 0L);
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(14, 71, 15);
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 42, 15);
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000001c8000L, active1, 0x20020000000000L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(14, 69, 15);
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L, active1, 0x80080000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200300000000L);
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 83, 15);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc0000000000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000L, active1, 0x40803c000000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000000000000L);
      case 120:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 115, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000L, active1, 0x33c000000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L, active1, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x6000000000000L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000000000L);
      case 103:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(15, 95, 15);
         break;
      case 104:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 110, 15);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000004000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000L, active1, 0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x6000000040000000L, active1, 0x10800000000000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(15, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(15, 24);
         break;
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(15, 94, 15);
         return jjMoveStringLiteralDfa16_0(active0, 0x188000L, active1, 0x20220000000000L);
      case 118:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 107, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0xc1208000000000L);
      case 63:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(16, 111);
         break;
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10000004000000L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x300000000L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x6008000040004000L, active1, 0x20020000000000L);
      case 102:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x18000000L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa17_0(active0, 0x180000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 36, 15);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1000000L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(16, 18, 15);
         break;
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x6000020000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(17, 51);
         break;
      case 45:
         return jjMoveStringLiteralDfa18_0(active0, 0x180000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000040000000L, active1, 0x300000000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x6000020000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1200018000000L);
      case 108:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(17, 88, 15);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000000000L);
      case 109:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 105, 15);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10000004000000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x40000000000000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L, active1, 0x80000000000000L);
      case 118:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L, active1, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 117, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x6000000000000L);
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x80000020000000L);
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000000000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(18, 15, 15);
         break;
      case 104:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x8000000000L);
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0xc000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x40000000000000L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x18000000L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x300000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000L, active1, 0x1200000000000L);
      case 118:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(18, 90, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(19, 96, 15);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(19, 97, 15);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1200000002000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000L, active1, 0x10000000000000L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000000000000L);
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x8018000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 41, 15);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x4000000000000L);
      case 119:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 118, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000L, active1, 0x4000000000000L);
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(20, 14, 15);
         break;
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000L, active1, 0x80000000000000L);
      case 109:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 116, 15);
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x1200000000000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000L, active1, 0x2000000000000L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000000L, active1, 0x2000L);
      case 116:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8010000000L);
      case 119:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 103, 15);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 109, 15);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 112, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10000000L);
      case 98:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x4000000000000L);
      case 101:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 119, 15);
         break;
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000000080000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(21, 30, 15);
         break;
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(21, 93, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0x100000L, active1, 0L);
      case 119:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 113, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1);
      return 22;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(22, 20, 15);
         break;
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x4000000000000L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x80000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(21, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1);
      return 23;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(23, 77, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa24_0(active0, 0x80000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa24_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 114, 15);
         break;
      case 102:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x10000000L);
      case 104:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(22, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1);
      return 24;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000000000000000L, active1, 0x10000000L);
      case 46:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(23, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1);
      return 25;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0x80000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa26_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(24, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, active1);
      return 26;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa27_0(active0, 0x4000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa27_0(active0, 0x8000000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa27_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, active1);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(25, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, active1);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa28_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(27, 19, 15);
         break;
      case 121:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(27, 92, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(26, active0, active1);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(26, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa29_0(active0, 0x4000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa29_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa30_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa31_0(active0, 0x4000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa31_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa32_0(active0, 0x8000000000000000L);
      case 118:
         return jjMoveStringLiteralDfa32_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(32, 63);
         break;
      case 97:
         return jjMoveStringLiteralDfa33_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0, 0L);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa34_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa35_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(35, 62, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(34, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7ff200200000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(9);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  break;
               case 3:
                  if ((0x7ff200200000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 39)
                     jjAddStates(0, 1);
                  else if (curChar == 34)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 46)
                     jjCheckNAdd(9);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 27:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 34)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  break;
               case 26:
                  if ((0x7ff200200000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7ff200200000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(15);
                  break;
               case 16:
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(2, 4);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 20:
                  if (curChar == 34 && kind > 121)
                     kind = 121;
                  break;
               case 21:
                  if (curChar == 39)
                     jjAddStates(0, 1);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(24);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(22);
                  }
                  break;
               case 25:
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(15);
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(15);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 27:
                  jjCheckNAddStates(2, 4);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(15);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 1:
                  jjAddStates(5, 6);
                  break;
               case 4:
                  if (curChar != 120)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (curChar != 70)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(5);
                  break;
               case 12:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 17:
                  jjCheckNAddStates(2, 4);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(22);
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 27:
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 124:
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   22, 23, 17, 19, 20, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\141\142\163", 
"\141\143\157\163\55\144\145\147\162\145\145\163", "\141\144\144\55\143\157\155\160\157\156\145\156\164", "\47", 
"\141\163\151\156\55\144\145\147\162\145\145\163", "\141\164\141\156\55\144\145\147\162\145\145\163", 
"\141\164\141\156\62\55\144\145\147\162\145\145\163", "\142\145\147\151\156", 
"\143\141\154\154\55\143\157\155\160\157\156\145\156\164\55\155\145\164\150\157\144", "\143\141\154\154\55\171\141\151\154\55\160\162\151\155\151\164\151\166\145", 
"\171\141\151\154\55\143\145\151\154\151\156\147", "\143\154\157\163\145\55\163\143\162\145\145\156", 
"\143\154\157\163\145\55\141\160\160\154\151\143\141\164\151\157\156", 
"\143\154\157\163\145\55\163\143\162\145\145\156\55\167\151\164\150\55\160\154\141\151\156\55\164\145\170\164", 
"\143\154\157\163\145\55\163\143\162\145\145\156\55\167\151\164\150\55\166\141\154\165\145", null, null, "\144\145\147\162\145\145\163\55\76\162\141\144\151\141\156\163", 
"\162\141\144\151\141\156\163\55\76\144\145\147\162\145\145\163", "\143\157\163\55\144\145\147\162\145\145\163", "\144\145\146", 
"\144\145\146\151\156\145\55\145\166\145\156\164", "\144\145\146\151\156\145\55\146\157\162\155", 
"\171\141\151\154\55\144\151\166\151\144\145", 
"\144\157\55\141\146\164\145\162\55\146\157\162\155\55\143\162\145\141\164\151\157\156", "\145\170\160", "\145\170\160\164", "\75", 
"\171\141\151\154\55\146\154\157\157\162", "\146\157\162\145\141\143\150", 
"\146\157\162\155\141\164\55\141\163\55\144\145\143\151\155\141\154", null, "\146\157\162\162\141\156\147\145", "\134", 
"\147\145\164\55\160\162\157\160\145\162\164\171", 
"\147\145\164\55\160\154\141\151\156\55\163\164\141\162\164\55\164\145\170\164", "\147\145\164\55\163\164\141\162\164\55\166\141\154\165\145", 
"\147\145\164\55\166\141\162", "\76", "\151\146", "\151\156\151\164\55\162\165\156\164\151\155\145", 
"\151\163\55\156\165\155\142\145\162\77", "\74", "\154\145\170\151\143\141\154\55\166\141\154\165\145", 
"\154\151\163\164", "\52\154\151\163\164\55\146\157\162\55\162\165\156\164\151\155\145\52", 
"\42\155\141\153\145\40\141\40\154\151\163\164\42", "\50", "\154\157\147", 
"\155\141\153\145\55\171\141\151\154\55\154\151\163\164", "\155\141\170", "\155\151\156", "\55", "\155\157\144\165\154\157", "\52", 
"\157\160\145\156\55\141\156\157\164\150\145\162\55\163\143\162\145\145\156", 
"\157\160\145\156\55\141\156\157\164\150\145\162\55\163\143\162\145\145\156\55\167\151\164\150\55\163\164\141\162\164\55\166\141\154\165\145", 
"\74\143\157\155\56\147\157\157\147\154\145\56\171\157\165\156\147\141\156\144\162\157\151\144\56\162\165\156\164\151\155\145\76", "\53", null, null, "\42", "\161\165\157\164\151\145\156\164", 
"\162\141\156\144\157\155\55\146\162\141\143\164\151\157\156", "\162\141\156\144\157\155\55\151\156\164\145\147\145\162", 
"\162\141\156\144\157\155\55\163\145\164\55\163\145\145\144", "\162\145\155\141\151\156\144\145\162", "\162\145\161\165\151\162\145", 
"\171\141\151\154\55\162\157\165\156\144", "\51", "\43\146", 
"\163\145\164\55\141\156\144\55\143\157\145\162\143\145\55\160\162\157\160\145\162\164\171\41", "\163\145\164\55\164\150\151\163\55\146\157\162\155", 
"\163\145\164\55\166\141\162\41", "\163\151\156\55\144\145\147\162\145\145\163", "\163\161\162\164", 
"\163\164\162\151\156\147\55\141\160\160\145\156\144", "\163\164\162\151\156\147\55\143\157\156\164\141\151\156\163", 
"\163\164\162\151\156\147\55\145\155\160\164\171\77", "\163\164\162\151\156\147\76\77", 
"\163\164\162\151\156\147\55\154\145\156\147\164\150", "\163\164\162\151\156\147\74\77", 
"\163\164\162\151\156\147\55\162\145\160\154\141\143\145\55\141\154\154", "\163\164\162\151\156\147\55\163\160\154\151\164", 
"\163\164\162\151\156\147\55\163\160\154\151\164\55\141\164\55\141\156\171", 
"\163\164\162\151\156\147\55\163\160\154\151\164\55\141\164\55\146\151\162\163\164", 
"\163\164\162\151\156\147\55\163\160\154\151\164\55\141\164\55\146\151\162\163\164\55\157\146\55\141\156\171", 
"\163\164\162\151\156\147\55\163\160\154\151\164\55\141\164\55\163\160\141\143\145\163", "\163\164\162\151\156\147\55\163\164\141\162\164\163\55\141\164", 
"\163\164\162\151\156\147\55\163\165\142\163\164\162\151\156\147", 
"\163\164\162\151\156\147\55\164\157\55\154\157\167\145\162\55\143\141\163\145", 
"\163\164\162\151\156\147\55\164\157\55\165\160\160\145\162\55\143\141\163\145", "\163\164\162\151\156\147\55\164\162\151\155", 
"\164\141\156\55\144\145\147\162\145\145\163", "\73\73\73", "\43\164", "\167\150\151\154\145", 
"\171\141\151\154\55\154\151\163\164\55\141\144\144\55\164\157\55\154\151\163\164\41", "\171\141\151\154\55\145\161\165\141\154\77", 
"\171\141\151\154\55\154\151\163\164\55\147\145\164\55\151\164\145\155", "\171\141\151\154\55\154\151\163\164\77", 
"\171\141\151\154\55\154\151\163\164\55\141\160\160\145\156\144\41", "\171\141\151\154\55\154\151\163\164\55\143\157\160\171", 
"\171\141\151\154\55\154\151\163\164\55\151\156\163\145\162\164\55\151\164\145\155\41", "\171\141\151\154\55\154\151\163\164\55\154\145\156\147\164\150", 
"\171\141\151\154\55\154\151\163\164\55\155\145\155\142\145\162\77", 
"\171\141\151\154\55\154\151\163\164\55\162\145\155\157\166\145\55\151\164\145\155\41", 
"\171\141\151\154\55\154\151\163\164\55\146\162\157\155\55\143\163\166\55\162\157\167", 
"\171\141\151\154\55\154\151\163\164\55\146\162\157\155\55\143\163\166\55\164\141\142\154\145", "\171\141\151\154\55\154\151\163\164\55\151\156\144\145\170", 
"\171\141\151\154\55\154\151\163\164\55\160\151\143\153\55\162\141\156\144\157\155", "\171\141\151\154\55\154\151\163\164\55\163\145\164\55\151\164\145\155\41", 
"\171\141\151\154\55\154\151\163\164\55\164\157\55\143\163\166\55\162\157\167", 
"\171\141\151\154\55\154\151\163\164\55\164\157\55\143\163\166\55\164\141\142\154\145", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_DECL",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x3ffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x1c00000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[25];
private final int[] jjstateSet = new int[50];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public YailParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public YailParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 123)
       {
          jjmatchedKind = 123;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 122 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    SwitchTo(IN_DECL);
         break;
      case 124 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
