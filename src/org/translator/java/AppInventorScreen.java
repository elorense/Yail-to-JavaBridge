/*
   appinventor-java-translation

   Originally authored by Joshua Swank at the University of Alabama
   Work supported in part by NSF award #0702764 and a Google 2011 CS4HS award

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

package org.translator.java;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import org.translator.java.code.ClassSegment;
import org.translator.java.code.SourceFile;
import org.translator.parser.*;
import org.translator.parser.Token;

import com.google.devtools.simple.runtime.components.android.util.CsvUtil;
import com.google.devtools.simple.runtime.components.util.YailList;

/**
 * 
 * @authors Aaron Halbleib
 */
/* this file takes a .yail file as input, parses it, and organizes the information therein into data structures
 * so that it can be translated into java code. In order to tokenize the yail file, it uses classes auto generated by
 * the program javacc. 
 * 
 */
//if you return a choose from a procedure the java will be wrong. also if you use a choose
//as the start for a forrange loop. this is because a choose is exactly the same as an if else
//in the yail file
/*list of things not yet implemented (can't guarantee 100% correctness), organized by App Inventor Category and name:
 * 
 * Definition:
 * ProcedureWithResult
 * 
 * Text:
 * is text empty?
 * text<
 * text>
 * trim
 * upcase
 * downcase
 * starts at
 * contains
 * split at first
 * split at first of any
 * split
 * split at any
 * split at spaces
 * segment
 * replace all
 * List:
 * replace list item
 * select list item
 * insert list item
 * length of list
 * append to list
 * is in list?
 * pick random item
 * is list empty?
 * copy list
 * is a list?
 * list to csv row
 * list to csv table
 * list from csv row
 * list from csv table
 * 
 * Math:
 * sqrt
 * random set seed
 * negate
 * min 
 * max
 * quotient
 * remainder
 * modulo
 * abs 
 * round
 * floor
 * ceiling
 * expt
 * exp
 * log
 * sin 
 * cos
 * tan
 * asin
 * acos
 * atan
 * atan2
 * convert radians to degrees
 * convert degrees to radians
 * format as decimal
 * is a number
 * 
 * Control:
 * while
 * for range
 * choose
 * open another screen
 * open another screen with start value
 * get start value
 * close screen
 * close screen with value
 * close application
 * get plain start text
 * close screen with plain text
 * 
 * 
*/
//test plan: test procedures with args and result in lots of situations
public class AppInventorScreen {
	int choose=0;
	//r stands for Random. if it is false, we have not yet added a random number generator to the variables list.
	//when an operation requiring a random number generator (so far only Random Integer) is encountered we will add te
	//a Random random to the variables list and set r to true, and then use that random object for all subsequent
	//random number generation(if any)
	boolean r;
	private String screenName;
	private String packageName;
	private JavaGenerator form;
	//components, or structures in app inventor which have direct javabridge counterparts
	private HashMap<String, AppComponent> components;
	//events, which are denoted by the keyword define-event in the .yail
	private ArrayList<CodeBlock> events;
	//user defined methods, signified by the keyword "def" in the .yail
	private ArrayList<Method> methods;
	//this is where App Inventor "primitive types": numbers, text, and lists 
	//all of which are also denoted using the keyword "def" in the .yail
	private ArrayList<JVar> variables;
	private String yailFile;
	private YailParserTokenManager yailParserTokenManager;

	protected AppInventorScreen(String screenName, InputStream inputStream, String yailFile)
		
			throws IOException {
		r=false;
		this.yailFile = yailFile;
		this.screenName = screenName;
		methods = new ArrayList<Method>();
		variables = new ArrayList<JVar>();
		components = new HashMap<String, AppComponent>();
		events = new ArrayList<CodeBlock>();
		yailParserTokenManager = 
				new YailParserTokenManager(new SimpleCharStream(inputStream));

	}

	protected SourceFile generateJavaFile() {
		//class which contains generated code. its toString method
		//provides the complete source after JavaGenerator.generateCode() is called here
		SourceFile file = new SourceFile(
				TranslatorConstants.PACKAGE_PREFIX.concat(packageName
						.toLowerCase()));
		
		form = new JavaGenerator(screenName, components, events, variables,
				methods);
		if (form != null)
			file.setMainClass((ClassSegment) form.generateCode());

		return file;
	}
	
	protected String getPackageName(){
		return packageName;
	}
	
	protected void genManifest(ArrayList<String> screenNames, HashMap<String, Boolean> permissions) {
		screenNames.add(screenName);
		HashMap<String, AppComponent> hm = components;
		for (String s : hm.keySet()){
			AppComponent ac=hm.get(s);
			if (ac.getType().contentEquals("Sound")){
				permissions.put(EclipseFileGen.VIBARTE_PERM_TXT, true);
			}
			else if(ac.getType().contentEquals("Texting")){
				permissions.put(EclipseFileGen.TEXT_PERM_TXT, true);
			}
			else if (ac.getType().contentEquals("Web")){
				permissions.put(EclipseFileGen.INTERNET_PERM_TXT, true);
			}
			else if (ac.getType().contentEquals("Camera")) {
				permissions.put(EclipseFileGen.CAMERA_PERM_TXT, true);
			}
		}
	}


	protected void loadYailFile() throws IOException {

		YailParser yailParser = 
							new YailParser(new FileInputStream(yailFile));
		
		try {
			yailParser.program();
			packageName = "blank";
			packageName = yailParser.getPackageName();
			components = yailParser.getComponents();
			variables = yailParser.getVariablesArray();
			events = yailParser.getEvents();
			methods = yailParser.getMethods();
			
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		String propertyName = null;
		String propertyValue = null;
		Token token;
		Integer z=1;
		z=z+1;
		
		token = yailParserTokenManager.getNextToken();
		//def is a boolean value to determine whether the termination token encountered by a user method definition was another def (will be true in that case
		//false otherwise). this is necessary because
		//the token in the getCodeBlock method is local to it so when that function returns, loadYailFile's token object will be right where
		//it left off, and if it calls the getnexttoken method it will get the token after def rather than def, messing up the logic of the while loop.
		// (ie, the parser will miss the next user function definition or variable definition, and the java output will be erroneous).
		boolean def=false;
		boolean defE=false;
		while (token.kind == YailParserConstants.EOF) {
			System.out.println("getting stuck here");
			token=yailParserTokenManager.getNextToken();
			//System.out.println(token.image);
			if (token.image == "define-event" || defE==true) {
				CodeBlock e=getEvent(defE,token);
				defE=e.getB2();
				events.add(e);
			} else if (token.image == "def" || def==true) {
				if (!def){
				token = yailParserTokenManager.getNextToken();
				}
				// user function
				if (token.image == "(") {
					String methodName = yailParserTokenManager.getNextToken().image;
					ArrayList<String>args=getArgs();
					CodeBlock codeBlock = getDefBlock( "method");
					if (codeBlock.getReturnVal()==null){
						methods.add(new Method(methodName, codeBlock,args));
					}
					else {
						methods.add(new Method(methodName, codeBlock,args,"Object"));
					}
					def=codeBlock.getB1();

				}
				// user variable
				else {
					variables.add(getVar(token.image));
					def=false;
				}
			}
		}
	}

	private CodeBlock getEvent(boolean b, Token token) {
		
		if (!b){
			token = yailParserTokenManager.getNextToken();
		}
		CodeBlock event = new CodeBlock(token.image);
		event.setMethod(yailParserTokenManager.getNextToken().image);
		token = yailParserTokenManager.getNextToken();
		token = yailParserTokenManager.getNextToken();
		if (!event.getMethod().contentEquals("Initialize")){
			event=getEventParamTypes(event);
		while (token.image != ")") {
			event.addArg(token.image);
			
			token = yailParserTokenManager.getNextToken();
		}
		}
		while (token.image != ";;;" && token.image != "init-runtime" && token.image!="define-event") {
			//System.out.println("event: " + token.image);
			token = yailParserTokenManager.getNextToken();
			//System.out.println("event1: " + token.image);
			if (token.image == "call-component-method") {

				event.addCall(getComponentMethodCall(""));

			} else if (token.image == "if") {

				event.addCall(new ComponentCall("if", ""));
				event.addIf(getIf());

			} else if (token.image == "call-yail-primitive yail-list-add-to-list!") {
				ArrayList<ComponentCall> ccal=getListAddCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"add items to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
				
			}
			//started here
			else if (token.image=="call-yail-primitive yail-list-set-item!"){
				ArrayList<ComponentCall> ccal=getListReplaceCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"replace list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-insert-item!"){
				ArrayList<ComponentCall> ccal=getListInsertCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"insert list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-append!"){
				ArrayList<ComponentCall> ccal=getListAppendCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"append to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-remove-item!"){
				ArrayList<ComponentCall> ccal=getListRemoveCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"remove list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive open-another-screen"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchForm");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive open-another-screen-with-start-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchFormWithStartupValue");
				cc.addArgument(ta.get(0));
				cc.addArgument(ta.get(1));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen with start value\"")){
					token = yailParserTokenManager.getNextToken();
				}
				
			}
			else if(token.image=="call-yail-primitive close-screen"){
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivity");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive close-screen-with-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with value\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen-with-plain-text"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with plain text\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			
			else if(token.image=="call-yail-primitive close-application"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishApplication");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close application\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image.contentEquals("call-yail-primitive random-set-seed")){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				//System.out.println("rsetseed");
				ArrayList<String> ta=getArgs();
				if (!r){
					JVar jv=new JVar("random");
					r=true;
					jv.setType("Random");
					variables.add(jv);
				}
				ComponentCall cc=new ComponentCall("random");
				cc.setMethod("setSeed");
				cc.addArgument(ta.get(0));
				while (!token.image.contentEquals("\"random set seed\"")){
					token = yailParserTokenManager.getNextToken();
				}
				event.addCall(cc);
			}
			
			//need to add generation code for for range and while
			else if (token.image == "forrange") {
				event.addCall(new ComponentCall("forrange", ""));
				event.addForRange(getForRange());
			}
			else if (token.image == "while") {
				event.addCall(new ComponentCall("while", ""));			
				event.addWhile(getWhile());
			}
			//notes for choose
			// basically an if else with a return value
			//for chooses, can look for ifs when parsing arguments
			//if we encounter an if generate a function called choose1 (use numbers for unique names)
			//which has a single if else and call that function
			else if (token.image == "foreach") {
				event.addCall(new ComponentCall("foreach", ""));
				event.addForEach(getForEach());
			} else if (token.image == "set-and-coerce-property!") {

				event.addCall(getComponentSetter());

			} else if (token.image == "set-var!") {
				
				String var = yailParserTokenManager.getNextToken().image;
				JVar jVar=new JVar(var);
				jVar.setVal(getArgs().get(0));
				event.addCall(new ComponentCall("assignment",""));
				event.addAssignment(jVar);
			}
			//user function call
			else if (token.image=="(("){
				ComponentCall cc=new ComponentCall("");
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				cc.setMethod(token.image);
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> myargs=getArgs();
				for (int i=0; i<myargs.size(); i++){
					cc.addArgument(myargs.get(i));
				}
				event.addCall(cc);
			}
		}
		if (token.image=="define-event"){
			event.setDefE(true);
		}
		return event;
	}

	

	private CodeBlock getCodeBlock(String terminationToken, String typeOfBlock) {
		CodeBlock event = new CodeBlock(typeOfBlock);
		Token token = yailParserTokenManager.getNextToken();
		//System.out.println("my token "+token.image);
		boolean first=true;
		while (!YailParserConstants.tokenImage[token.kind]
				.contentEquals(terminationToken)&&token.kind != YailParserConstants.EOF) {
			//else code..
			if (!first){
			token = yailParserTokenManager.getNextToken();
			}
			else {
				first=false;
			}
		//	System.out.println(typeOfBlock +". "+terminationToken);
		//	System.out.println(YailParserConstants.tokenImage[token.kind]);
			//if (typeOfBlock.contentEquals("while")){
			//	while(token.kind != YailParserConstants.EOF){
			//		System.out.println(YailParserConstants.tokenImage[token.kind]);
			//		token = yailParserTokenManager.getNextToken();
			//	}
			//}
			if (token.image=="begin" && typeOfBlock.contentEquals("if")){
				event.setB1(true);
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				if (token.image=="if"){
					event.setDefE(true);
					return event;
				}
				else {
					//System.out.println(token.image);
					event.setToken(token);
					return event;
				}
			}
			//System.out.println(typeOfBlock + terminationToken);
			
			if (token.image == "call-component-method") {

				event.addCall(getComponentMethodCall(""));

			}
			else if(token.image=="call-yail-primitive open-another-screen"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchForm");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive open-another-screen-with-start-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchFormWithStartupValue");
				cc.addArgument(ta.get(0));
				cc.addArgument(ta.get(1));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen with start value\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen"){
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivity");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen-with-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with value\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen-with-plain-text"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with plain text\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			
			else if(token.image=="call-yail-primitive close-application"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishApplication");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close application\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if (token.image == "forrange") {
				event.addCall(new ComponentCall("forrange", ""));
				event.addForRange(getForRange());
			}
			else if (token.image == "while") {
				event.addCall(new ComponentCall("while", ""));			
				event.addWhile(getWhile());
			}
			else if (token.image == "if") {

				event.addCall(new ComponentCall("if", ""));
				event.addIf(getIf());

			}
			else if (token.image == "call-yail-primitive yail-list-add-to-list!") {
				ArrayList<ComponentCall> ccal=getListAddCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"add items to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
				
			}
			//started here
			else if (token.image=="call-yail-primitive yail-list-set-item!"){
				ArrayList<ComponentCall> ccal=getListReplaceCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"replace list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-insert-item!"){
				ArrayList<ComponentCall> ccal=getListInsertCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"insert list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-append!"){
				ArrayList<ComponentCall> ccal=getListAppendCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"append to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-remove-item!"){
				ArrayList<ComponentCall> ccal=getListRemoveCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"remove list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive random-set-seed"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				if (!r){
					JVar jv=new JVar("random");
					r=true;
					jv.setType("Random");
					variables.add(jv);
				}
				ComponentCall cc=new ComponentCall("random");
				cc.setMethod("setSeed");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"random set seed\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image == "foreach") {
				event.addCall(new ComponentCall("foreach", ""));
				event.addForEach(getForEach());
			} else if (token.image == "set-and-coerce-property!") {

				event.addCall(getComponentSetter());

			} 
			
			else if (token.image == "set-var!") {
				
				String var = yailParserTokenManager.getNextToken().image;
				JVar jVar=new JVar(var);
				jVar.setVal(getArgs().get(0));
				event.addCall(new ComponentCall("assignment",""));
				event.addAssignment(jVar);
			}
			//user function call
			else if (token.image=="(("){
				ComponentCall cc=new ComponentCall("");
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				cc.setMethod(token.image);
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> myargs=getArgs();
				for (int i=0; i<myargs.size(); i++){
					cc.addArgument(myargs.get(i));
				}
			//	System.out.println("deep "+YailParserConstants.tokenImage[token.kind]);
				event.addCall(cc);
			}
			if (typeOfBlock.contentEquals("forrange") || typeOfBlock.contentEquals("choose")){
				String t=getArg(token);
				if(t!=null){
					if (typeOfBlock.contentEquals("forrange")){
					ArrayList<String> ta=getArgs();
					
				//	System.out.println(t);
					if (ta.size()>1){
						event.addArg(t);
						event.addArg(ta.get(0));
						event.addArg(ta.get(1));
					}
					else {
						event.addArg("0");
						event.addArg(t);
						event.addArg(ta.get(0));	
					}
					return event;
					}
					else {
						System.out.println("get cb: "+YailParserConstants.tokenImage[token.kind]);
						event.addArg(t);
						return event;
					}
				}
			}
		}
		return event;
	}
	private CodeBlock getElse(String terminationToken, Token token) {
		CodeBlock event = new CodeBlock("else");
		int i=0;
		while (!YailParserConstants.tokenImage[token.kind]
				.contentEquals(terminationToken)) {
			//System.out.println("asdfasdf");
			if (i!=0){
				token = yailParserTokenManager.getNextToken();
			}
			if (token.image == "call-component-method") {

				event.addCall(getComponentMethodCall(""));

			}
			else if(token.image=="call-yail-primitive open-another-screen"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchForm");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive open-another-screen-with-start-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchFormWithStartupValue");
				cc.addArgument(ta.get(0));
				cc.addArgument(ta.get(1));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen with start value\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive close-screen"){
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivity");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive close-screen-with-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with value\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if(token.image=="call-yail-primitive close-screen-with-plain-text"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with plain text\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			
			else if(token.image=="call-yail-primitive close-application"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishApplication");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close application\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image == "forrange") {
				event.addCall(new ComponentCall("forrange", ""));
				event.addForRange(getForRange());
			}
			else if (token.image == "while") {
				event.addCall(new ComponentCall("while", ""));			
				event.addWhile(getWhile());
			}
			else if (token.image == "if") {

				event.addCall(new ComponentCall("if", ""));
				event.addIf(getIf());

			} 
			else if (token.image == "call-yail-primitive yail-list-add-to-list!") {
				ArrayList<ComponentCall> ccal=getListAddCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"add items to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
				
			}
			//started here
			else if (token.image=="call-yail-primitive yail-list-set-item!"){
				ArrayList<ComponentCall> ccal=getListReplaceCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"replace list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-insert-item!"){
				ArrayList<ComponentCall> ccal=getListInsertCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"insert list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-append!"){
				ArrayList<ComponentCall> ccal=getListAppendCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"append to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-remove-item!"){
				ArrayList<ComponentCall> ccal=getListRemoveCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"remove list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive random-set-seed"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				if (!r){
					JVar jv=new JVar("random");
					r=true;
					jv.setType("Random");
					variables.add(jv);
				}
				ComponentCall cc=new ComponentCall("random");
				cc.setMethod("setSeed");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"random set seed\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image == "foreach") {
				event.addCall(new ComponentCall("foreach", ""));
				event.addForEach(getForEach());
			} else if (token.image == "set-and-coerce-property!") {

				event.addCall(getComponentSetter());

			} 
			else if (token.image == "set-var!") {
				
				String var = yailParserTokenManager.getNextToken().image;
				JVar jVar=new JVar(var);
				jVar.setVal(getArgs().get(0));
				event.addCall(new ComponentCall("assignment",""));
				event.addAssignment(jVar);
			
			}
			//user function call
			else if (token.image=="(("){
				ComponentCall cc=new ComponentCall("");
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				cc.setMethod(token.image);
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> myargs=getArgs();
				for (int i1=0; i1<myargs.size(); i1++){
					cc.addArgument(myargs.get(i1));
				}
				event.addCall(cc);
			}
			i++;
		}
		return event;
	}

	private CodeBlock getDefBlock(String typeOfBlock) {
		CodeBlock event = new CodeBlock(typeOfBlock);
		Token token = yailParserTokenManager.getNextToken();
	//	System.out.println("token: "+token.image);
		String ret=null;
		boolean rewind=false;
		while (token.image!=";;;" && token.image!="def") {
			
			if (YailParserConstants.tokenImage[token.kind]
					.contentEquals("<EOF>")){
				break;
			}
			if (!rewind){
			token = yailParserTokenManager.getNextToken();
			}
			else {
				rewind=true;
			}
		//	System.out.println("token: "+token.image);
			if (token.image == "call-component-method") {

				event.addCall(getComponentMethodCall(""));

			} else if (token.image == "if") {

				event.addCall(new ComponentCall("if", ""));
				event.addIf(getIf());

			}
			else if (token.image == "forrange") {
				event.addCall(new ComponentCall("forrange", ""));
				event.addForRange(getForRange());
			}
			else if (token.image == "while") {
				event.addCall(new ComponentCall("while", ""));			
				event.addWhile(getWhile());
			}
			else if (token.image == "foreach") {
				event.addCall(new ComponentCall("foreach", ""));
				event.addForEach(getForEach());
			} 
			else if(token.image=="call-yail-primitive open-another-screen"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchForm");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive open-another-screen-with-start-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("switchFormWithStartupValue");
				cc.addArgument(ta.get(0));
				cc.addArgument(ta.get(1));
				event.addCall(cc);
				while (!token.image.contentEquals("\"open another screen with start value\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen"){
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivity");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen-with-value"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with value\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if(token.image=="call-yail-primitive close-screen-with-plain-text"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishActivityWithResult");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"close screen with plain text\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			
			else if(token.image=="call-yail-primitive close-application"){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ComponentCall cc=new ComponentCall("Form");
				cc.setMethod("finishApplication");
				event.addCall(cc);
				while (!token.image.contentEquals("\"close application\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if (token.image == "set-and-coerce-property!") {
				event.addCall(getComponentSetter());
			} 
			else if (token.image == "call-yail-primitive yail-list-add-to-list!") {
				ArrayList<ComponentCall> ccal=getListAddCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"add items to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
				
			}
			//started here
			else if (token.image=="call-yail-primitive yail-list-set-item!"){
				ArrayList<ComponentCall> ccal=getListReplaceCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"replace list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-insert-item!"){
				ArrayList<ComponentCall> ccal=getListInsertCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"insert list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-append!"){
				ArrayList<ComponentCall> ccal=getListAppendCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"append to list\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image=="call-yail-primitive yail-list-remove-item!"){
				ArrayList<ComponentCall> ccal=getListRemoveCall();
				event.addCall(ccal.get(0));
				event.addCall(ccal.get(1));
				while (!token.image.contentEquals("\"remove list item\"")){
					token = yailParserTokenManager.getNextToken();
				}
			}
			else if (token.image.contentEquals("call-yail-primitive random-set-seed")){
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				ArrayList<String> ta=getArgs();
			//	System.out.println("ransetseed");
				if (!r){
					JVar jv=new JVar("random");
					r=true;
					jv.setType("Random");
					variables.add(jv);
				}
				ComponentCall cc=new ComponentCall("random");
				cc.setMethod("setSeed");
				cc.addArgument(ta.get(0));
				event.addCall(cc);
				while (!token.image.contentEquals("\"random set seed\"")){
					token = yailParserTokenManager.getNextToken();
				}
				token = yailParserTokenManager.getNextToken();
			}
			else if (token.image == "set-var!") {
				
				String var = yailParserTokenManager.getNextToken().image;
				JVar jVar=new JVar(var);
				jVar.setVal(getArgs().get(0));
				event.addCall(new ComponentCall("assignment",""));
				event.addAssignment(jVar);
			}
			//user function call
			else if (token.image=="(("){
				ComponentCall cc=new ComponentCall("");
				token = yailParserTokenManager.getNextToken();
				token = yailParserTokenManager.getNextToken();
				boolean b=true;
				for (int i=0; i<methods.size(); i++){
					if (methods.get(i).getName().contentEquals(token.image) && !methods.get(i).getReturnType().contentEquals("void")){
						//if true, is procedure with result, and thus must be a return statement in this context
						b=false;
					}
				}
				if (b){
					cc.setMethod(token.image);
					token = yailParserTokenManager.getNextToken();
					ArrayList<String> myargs=getArgs();
					for (int i=0; i<myargs.size(); i++){
						cc.addArgument(myargs.get(i));
					}
					event.addCall(cc);
				}
				else {
					StringBuffer sb=new StringBuffer();
					sb.append(token.image+"(");
					token = yailParserTokenManager.getNextToken();
					ArrayList<String> myargs=getArgs();
					for (int i=0; i<myargs.size(); i++){
						if (i==myargs.size()-1){
							sb.append(myargs.get(i));
						}
						else {
							sb.append(myargs.get(i)+", ");
						}
					}
					sb.append(")");
					event.setReturnVal(sb.toString());
				}
			}
		//	System.out.println("here");
			ret=getArg(token);
			if (ret!=null){
				event.setReturnVal(ret);
			}
		}
		if (token.image=="def"){
			event.setB1(true);
		}
		return event;
	}
	ArrayList<ComponentCall> getListRemoveCall(){
		yailParserTokenManager.getNextToken();
		yailParserTokenManager.getNextToken();
		ArrayList<String> ta=getArgs();
		ComponentCall cc = new ComponentCall(ta.get(0)+"IL");
		cc.addArgument(ta.get(1));
		cc.setMethod("remove");
		ComponentCall cc1=new ComponentCall(ta.get(0));
		cc1.setMethod("setItems");
		cc1.addArgument(cc.getCalledComponentName());
		ArrayList<ComponentCall> al=new ArrayList<ComponentCall>();
		al.add(cc);
		al.add(cc1);
		return al;
	}
	ArrayList<ComponentCall> getListAddCall() {
		//note: calling set items every time doesnt seem to be necessary. changes show up
		//after a simple add call to the intermediate list; 
		yailParserTokenManager.getNextToken();
		yailParserTokenManager.getNextToken();
		ArrayList<String> tempArray = getArgs();
		ComponentCall cc = new ComponentCall(tempArray.get(0)+"IL");
		String arg=tempArray.get(1);
		//if (!arg.endsWith("\"")){
		//	arg=arg.concat(".toString()");
		//}
		cc.addArgument(arg);
		cc.setMethod("add");
		ComponentCall cc1=new ComponentCall(tempArray.get(0));
		cc1.setMethod("setItems");
		cc1.addArgument(cc.getCalledComponentName());
		ArrayList<ComponentCall> al=new ArrayList<ComponentCall>();
		al.add(cc);
		al.add(cc1);
		return al;
	}
	ArrayList<ComponentCall> getListReplaceCall(){
		yailParserTokenManager.getNextToken();
		yailParserTokenManager.getNextToken();
		ArrayList<String> ta = getArgs();
		ComponentCall cc = new ComponentCall(ta.get(0)+"IL");

		cc.addArgument(ta.get(1)+"-1");
		cc.addArgument(ta.get(2));
		cc.setMethod("set");
		ComponentCall cc1=new ComponentCall(ta.get(0));
		cc1.setMethod("setItems");
		cc1.addArgument(cc.getCalledComponentName());
		ArrayList<ComponentCall> al=new ArrayList<ComponentCall>();
		al.add(cc);
		al.add(cc1);
		return al;
	}
	ArrayList<ComponentCall> getListAppendCall(){
		yailParserTokenManager.getNextToken();
		yailParserTokenManager.getNextToken();
		ArrayList<String> ta = getArgs();
		ComponentCall cc = new ComponentCall(ta.get(0)+"IL");

		cc.addArgument(ta.get(1)+"IL");
		cc.setMethod("addAll");
		ComponentCall cc1=new ComponentCall(ta.get(0));
		cc1.setMethod("setItems");
		cc1.addArgument(cc.getCalledComponentName());
		ArrayList<ComponentCall> al=new ArrayList<ComponentCall>();
		al.add(cc);
		al.add(cc1);
		return al;
	}
	ArrayList<ComponentCall> getListInsertCall(){
		yailParserTokenManager.getNextToken();
		yailParserTokenManager.getNextToken();
		ArrayList<String> ta = getArgs();
		ComponentCall cc = new ComponentCall(ta.get(0)+"IL");
		cc.addArgument(ta.get(1)+"-1");
		cc.addArgument(ta.get(2));
		cc.setMethod("add");
		ComponentCall cc1=new ComponentCall(ta.get(0));
		cc1.setMethod("setItems");
		cc1.addArgument(cc.getCalledComponentName());
		ArrayList<ComponentCall> al=new ArrayList<ComponentCall>();
		al.add(cc);
		al.add(cc1);
		return al;
	}
	ComponentCall getListIndexCall(String var) {
		Token token = yailParserTokenManager.getNextToken();
		String object = "";
		while (token.image != "get-var") {
			if (token.image == "lexical-value") {
				object = yailParserTokenManager.getNextToken().image;
			}
			token = yailParserTokenManager.getNextToken();
		}
		String list = yailParserTokenManager.getNextToken().image;
		ComponentCall componentCall = new ComponentCall(list);
		componentCall.setMethod("getItems().indexOf");
		componentCall.addArgument(object);
		componentCall.setVar(var);
		return componentCall;
	}

	private ComponentCall getComponentGetter(String var) {
		ComponentCall componentCall = new ComponentCall(
				yailParserTokenManager.getNextToken().image.replace("'", ""));
		componentCall.setVar(var);
		componentCall.setMethod(yailParserTokenManager.getNextToken().image.replace("'", ""));
		return componentCall;
	}

	private org.translator.java.IfStatement getIf() {
		ArrayList<String> ta=getArgs();
		String operator = ta.get(0);
	//	System.out.println("here: "+ta);

		CodeBlock then = getCodeBlock("\"\\n)\\n)\"", "if");
		IfStatement is=new IfStatement(null, null, operator, then);
		if (then.getB1()==true && then.getB2()==true){
			is.setElseIf(getIf());
		}
		else if (then.getB1()==true  && then.getB2()==false){
			is.setElseNoCon(getElse("\"\\n)\\n)\"",then.getToken()));
		}
		return is;
	}

	private ForEach getForEach() {
		Token token = yailParserTokenManager.getNextToken();
		String var = token.image;
		String type = "String";
		while (token.image != "begin") {
			token = yailParserTokenManager.getNextToken();
		}
		CodeBlock codeBlock = getCodeBlock("\"get-var\"", "foreach");
		String listName = yailParserTokenManager.getNextToken().image;
		listName=listName.concat(".getItems()");
		return new ForEach(type, listName, var, codeBlock);
	}
	private ForRange getForRange() {
		Token token = yailParserTokenManager.getNextToken();
		String var = token.image;
		while (token.image != "begin") {
			token = yailParserTokenManager.getNextToken();
		}
		CodeBlock codeBlock = getCodeBlock("", "forrange");
		String increment=codeBlock.popFromArgs();
		String end=codeBlock.popFromArgs();
		String start=codeBlock.popFromArgs();
		return new ForRange(var, start, end, increment, codeBlock);
	}
	private WhileLoop getWhile() {
		ArrayList<String> ta=getArgs();
		String test=ta.get(0);
		//System.out.println(ta);
		//while (token.image != "begin") {
		//	System.out.println("in while: "+YailParserConstants.tokenImage[token.kind]);
		//	token = yailParserTokenManager.getNextToken();
		//}
		CodeBlock body = getCodeBlock("\"\\n)\\n)\"", "while");
		return new WhileLoop(test,body);
	}
	private ComponentCall getComponentSetter() {
		ComponentCall componentCall = new ComponentCall(
				yailParserTokenManager.getNextToken().image.replace("'", ""));
		componentCall.setMethod(yailParserTokenManager.getNextToken().image
				.replace("'", ""));
		
		componentCall.addArgument(getArgs().get(0));
		return componentCall;
	}

	// if the call is used in an assignment statement, pass in the variable it
	// is being assigned to. else,
	// pass in an empty string
	private ComponentCall getComponentMethodCall(String var) {
		ComponentCall componentCall = new ComponentCall(
				yailParserTokenManager.getNextToken().image.replace("'", ""));
		componentCall.setMethod(yailParserTokenManager.getNextToken().image
				.replace("'", ""));
		yailParserTokenManager.getNextToken();
		yailParserTokenManager.getNextToken();
		componentCall.setArgs(getArgs());
		if (var.length() > 0) {
			componentCall.setVar(var);
		}
		return componentCall;
	}
		
	//get function arguments
	private String getArg(Token token){
				if (token.image.contentEquals("#f")){
					return "false";
				}
				else if (token.image.contentEquals("#t")){
					return "true";
				}

				else if (token.image.startsWith("\"") ||YailParserConstants.tokenImage[token.kind]
						.equals("<DECIMALVAL>")){
					return token.image;
				}
				else if (token.image == "lexical-value") {
					token = yailParserTokenManager.getNextToken();
					return token.image;
				} else if (token.image == "get-property") {
					StringBuffer sb = new StringBuffer();
					token = yailParserTokenManager.getNextToken();
					sb.append(token.image.replace("'", ""));
					token = yailParserTokenManager.getNextToken();
					sb.append("." + token.image.replace("'", "") + "()");
					return sb.toString();
				} else if (token.image == "call-yail-primitive") {
					return getYailPrimitive();
				} else if (token.image == "get-var") {
					token = yailParserTokenManager.getNextToken();
					return token.image;
				}
				 
				else if (token.image=="call-component-method"){
					StringBuffer stringBuffer = new StringBuffer();
					token = yailParserTokenManager.getNextToken();
					stringBuffer.append(token.image.replace("'", ""));
					token = yailParserTokenManager.getNextToken();
					stringBuffer.append("."+token.image.replace("'", "")+"(");
					token = yailParserTokenManager.getNextToken();
					token = yailParserTokenManager.getNextToken();
					ArrayList<String>tempArray1=getArgs();
					int i=0;
					for (String arg:tempArray1){
						if (i==0){
							stringBuffer.append(arg);
						}
						else {
							stringBuffer.append(", " + arg);
						}
						i++;
					}
					stringBuffer.append(")");
					return stringBuffer.toString();
				}
				else {
					return null;
				}
	}
	private ArrayList<String> getArgs() {
		ArrayList<String> argsArray = new ArrayList<String>();
		Token token = yailParserTokenManager.getNextToken();
	//	System.out.println("deep 2"+YailParserConstants.tokenImage[token.kind]);
		
		while (token.image != ")" && !token.image.contentEquals("begin") && !YailParserConstants.tokenImage[token.kind].contentEquals("\"\\n)\\n)\"")) {
			//System.out.println("in getargs: "+YailParserConstants.tokenImage[token.kind]);
			if (token.image != "(" && token.image != "\n") {
				if (token.image.endsWith("\\\"")){
					String propval=token.image;
					token = yailParserTokenManager.getNextToken();
					while (!YailParserConstants.tokenImage[token.kind]
							.equals("<VALTYPE>")) {
						propval = propval.concat(token.image);
						token = yailParserTokenManager.getNextToken();
					}
					argsArray.add(propval);
				}
				else {
					if (token.image.contentEquals("#f")){
						argsArray.add("false");
					}
					else if (token.image.contentEquals("#t")){
						argsArray.add("true");
					}
					else if (token.image=="(("){
						token = yailParserTokenManager.getNextToken();
						StringBuffer sb=new StringBuffer();
						token = yailParserTokenManager.getNextToken();
						sb.append(token.image+"(");
						token = yailParserTokenManager.getNextToken();
						ArrayList<String> myargs=getArgs();
						for (int i=0; i<myargs.size(); i++){
							if (i==myargs.size()-1){
								sb.append(myargs.get(i));
							}
							else {
								sb.append(myargs.get(i)+", ");
							}
						}
						sb.append(")");
						argsArray.add(sb.toString());
					}
					else {
						argsArray.add(token.image);
					}
				}
			} else if (token.image != "\n") {
				while (token.image != ")" && !token.image.contentEquals("begin")) {
				//	System.out.println("inner while "+token.image);
					if (token.image == "lexical-value") {
						token = yailParserTokenManager.getNextToken();
						argsArray.add(token.image);
					} else if (token.image == "get-property") {
						StringBuffer sb = new StringBuffer();
						token = yailParserTokenManager.getNextToken();
						sb.append(token.image.replace("'", ""));
						token = yailParserTokenManager.getNextToken();
						sb.append("." + token.image.replace("'", "") + "()");
						argsArray.add(sb.toString());
					} else if (token.image.contentEquals( "call-yail-primitive")) {
						argsArray.add(getYailPrimitive());
				//		System.out.println("after prim"+argsArray);
				//		System.out.println(token.image);
					} 
					else if (token.image.contentEquals("and-delayed")){
						ArrayList<String> ta=getArgs();
						StringBuffer sb=new StringBuffer();
						sb.append(ta.get(0));
						for (int i=1; i<ta.size(); i++){
							sb.append(" && "+ta.get(i));
						}
						argsArray.add("("+sb.toString()+")");
					}
					else if (token.image.contentEquals("or-delayed")){
						ArrayList<String> ta=getArgs();
						StringBuffer sb=new StringBuffer();
						sb.append(ta.get(0));
						for (int i=1; i<ta.size(); i++){
							sb.append(" || "+ta.get(i));
						}
						argsArray.add("("+sb.toString()+")");
					}
					else if (token.image == "get-var") {
						token = yailParserTokenManager.getNextToken();
						argsArray.add(token.image);
					}
					//choose
					else if (token.image=="if"){
						argsArray.add("choose"+choose+"()");
						
						ArrayList<String> ta=getArgs();
						String test=ta.get(0);
		
						//token = yailParserTokenManager.getNextToken();
						//while (!token.image.contentEquals("begin")){
						//	token = yailParserTokenManager.getNextToken();
						//}
						CodeBlock ifbod=getCodeBlock("","choose");
						//token = yailParserTokenManager.getNextToken();
						//while (!token.image.contentEquals("begin")){
						//	System.out.println("ayyy "+YailParserConstants.tokenImage[token.kind]+token.image);
						//	token = yailParserTokenManager.getNextToken();
						//}
						IfStatement is=new IfStatement(null,null,test,ifbod);
						CodeBlock elsebod=getCodeBlock("","choose");
						is.setElseNoCon(elsebod);
						CodeBlock cb=new CodeBlock("def");
						cb.addCall(new ComponentCall("if",""));
						cb.addIf(is);
						Method m=new Method("choose"+choose,cb,new ArrayList<String>());
					//	choose++;
						methods.add(m);
					}
					else if (token.image=="call-component-method"){
						StringBuffer stringBuffer = new StringBuffer();
						token = yailParserTokenManager.getNextToken();
						stringBuffer.append(token.image.replace("'", ""));
						token = yailParserTokenManager.getNextToken();
						stringBuffer.append("."+token.image.replace("'", "")+"(");
						token = yailParserTokenManager.getNextToken();
						token = yailParserTokenManager.getNextToken();
						ArrayList<String>tempArray1=getArgs();
						int i=0;
						for (String arg:tempArray1){
							if (i==0){
								stringBuffer.append(arg);
							}
							else {
								stringBuffer.append(", " + arg);
							}
							i++;
						}
						stringBuffer.append(")");
						argsArray.add(stringBuffer.toString());
					}
				//	System.out.println(token.image);
					token = yailParserTokenManager.getNextToken();
				//	System.out.println("here "+token.image);
				}
			}
			if (token.image.contentEquals("begin")){
			//	System.out.println("here 1"+token.image);
				break;
			}
			token = yailParserTokenManager.getNextToken();
			//System.out.println("here 2"+token.image);
		}
		
		return argsArray;
	}
	//get string form of a built in Java operation, denoted by "call-yail-primitive"
	String getYailPrimitive() {
		Token token = yailParserTokenManager.getNextToken();
		String temp = "";
		//System.out.println(token.image);
		if (token.image.contentEquals("random-set-seed")){
			return "random-set-seed";
		}
		else if (token.image == "string-append") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			StringBuffer stringBuffer = new StringBuffer();
			for (int i = 0; i < tempArray.size(); i++) {
				if (i == 0) {
					stringBuffer.append(tempArray.get(i));
				} else {
					stringBuffer.append(" + " + tempArray.get(i));
				}
			}
			while (!token.image.contentEquals("\"make text\"") && !token.image.contentEquals("\"join\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return stringBuffer.toString();
		}
		else if (token.image=="get-start-value"){
			while (!token.image.contentEquals("\"get start value\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Form.getStartupValue()";
		}
		else if (token.image=="get-plain-start-text"){
			while (!token.image.contentEquals("\"get plain start text\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Form.getStartupValue()";
		}
		else if (token.image=="string-empty?"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"is text empty?\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return tempArray.get(0)+".length()<1";
		}
		else if (token.image=="string<?"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"text<\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return tempArray.get(0)+".compareTo("+tempArray.get(1)+")<0";
		}
		else if (token.image=="string>?"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"text>\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return tempArray.get(0)+".compareTo("+tempArray.get(1)+")>0";
		}
		else if(token.image=="string-trim"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"trim\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return ta.get(0)+".trim()";
		}
		else if(token.image=="string-to-upper-case"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"upcase\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return ta.get(0)+".toUpperCase()";
		}
		else if(token.image=="string-to-lower-case"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"downcase\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return ta.get(0)+".toLowerCase()";
		}
		else if (token.image=="string-starts-at"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"starts at\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return ta.get(0)+".indexOf("+ta.get(1)+")+1";
		}
		else if (token.image=="string-contains"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
		//	System.out.println("contains "+ta+ "image "+token.image);
			while (!token.image.contentEquals("\"contains\"")) {
				token = yailParserTokenManager.getNextToken();
			}
		//	System.out.println("contains "+ta+ "image "+token.image);
			return ta.get(0)+".contains("+ta.get(1)+")";
		}
		else if (token.image=="string-split-at-first"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"split at first\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "YailList.makeList("+ta.get(0)+".split(\""+ta.get(1)+"\", 2))";
		}
		else if (token.image=="string-split"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"split\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "YailList.makeList("+ta.get(0)+".split(\""+ta.get(1)+"\"))";
		}
		else if (token.image=="string-split-at-any"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"split at any\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "YailList.makeList("+ta.get(0)+".split("+ta.get(1)+".replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\"|\")"+"))";
		}
		else if (token.image=="string-split-at-spaces"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"split at spaces\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "YailList.makeList("+ta.get(0)+".split(\"\\s+\"))";
		}
		else if (token.image=="string-split-at-first-of-any"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"split at first of any\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "YailList.makeList("+ta.get(0)+".split("+ta.get(1)+".replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\"|\")"+", 2))";
		}
		else if(token.image=="string-substring"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"segment\"")) {
				token = yailParserTokenManager.getNextToken();
			}
		    return ta.get(0)+".substring("+ta.get(1)+"-1 , "+ta.get(2)+"+"+ta.get(1)+"-1)";
		}
		else if (token.image=="string-replace-all"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			while (!token.image.contentEquals("\"replace all\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return ta.get(0)+".replaceAll("+ta.get(1)+", "+ta.get(2)+")";
		}

		else if (token.image == "string-length") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList <String> argsArray=getArgs();
			temp = argsArray.get(0).concat(".length()");
		//	System.out.println("hehe "+argsArray);
			while (!token.image.contentEquals("\"length\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return temp;
		} 
		else if (token.image=="yail-list-length"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList <String> argsArray=getArgs();
			while (!token.image.contentEquals("\"length of list\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return argsArray.get(0) + ".getItems().size()";
		}
		else if (token.image=="yail-list?"){
			token=yailParserTokenManager.getNextToken();
			token=yailParserTokenManager.getNextToken();
			String object=getArgs().get(0);
			while (!token.image.contentEquals( "\"is a list?\"")) {
				token=yailParserTokenManager.getNextToken();
			}
			return object+".getClass().getName().contentEquals(\"YailList\")";
		}
		else if (token.image=="yail-list-pick-random"){
			token=yailParserTokenManager.getNextToken();
			token=yailParserTokenManager.getNextToken();
			ArrayList <String> argsArray=getArgs();
			while (!token.image.contentEquals( "\"pick random item\"")) {
				token=yailParserTokenManager.getNextToken();
			}
			return argsArray.get(0)+".getItems().get( (int)(Math.random() * ("+ argsArray.get(0)+".getItems().size()+1)))";
		}
		else if (token.image=="yail-list-empty?"){
			token=yailParserTokenManager.getNextToken();
			token=yailParserTokenManager.getNextToken();
			ArrayList <String> argsArray=getArgs();
			while (!token.image.contentEquals( "\"is list empty?\"")) {
				token=yailParserTokenManager.getNextToken();
			}
			return argsArray.get(0)+".getItems().isEmpty()";
		}
		
		else if (token.image=="yail-list-member?"){
			token=yailParserTokenManager.getNextToken();
			token=yailParserTokenManager.getNextToken();
			ArrayList<String> ta=getArgs();
			String object=ta.get(0);
			String list=ta.get(1);
		//	System.out.println("list mem"+ta);
			while (!token.image.contentEquals("\"is in list?\"")) {

				token=yailParserTokenManager.getNextToken();
			}
			return list+".getItems().contains("+object+")";
		}
		else if (token.image == "yail-list-index") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList <String> argsArray=getArgs();
			while (!token.image.contentEquals("\"position in list\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			temp = argsArray.get(1).concat(".getItems().indexOf(" + argsArray.get(0) + ")");
			return temp;
		} else if (token.image == "yail-list-get-item") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"select list item\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return tempArray.get(0)+".getItems().get(" + tempArray.get(1) + "-1)";
		}
		else if (token.image == "yail-list-copy") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"copy list\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "YailList.makeList("+tempArray.get(0)+".getItems())";
		}
		else if (token.image == "yail-list-to-csv-row"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"list to csv row\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "CsvUtil.toCsvRow("+tempArray.get(0)+")";
		}
		else if(token.image == "yail-list-to-csv-table") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"list to csv table\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "CsvUtil.toCsvTable("+tempArray.get(0)+")";
		}
		else if (token.image == "yail-list-from-csv-row") {
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"list from csv row\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "CsvUtil.fromCsvRow("+tempArray.get(0)+")";
		}
		
		else if (token.image == "yail-list-from-csv-table"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> tempArray = getArgs();
			while (!token.image.contentEquals("\"list from csv table\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "CsvUtil.fromCsvTable("+tempArray.get(0)+")";
		}
		else if (token.image=="sqrt"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"sqrt\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.sqrt("+ ta.get(0) +")";
		}
		else if (token.image=="min"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"min\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			if (ta.size()==2){
				return "Math.min("+ ta.get(0) +", "+ta.get(1) +")";
			}
			StringBuffer sb=new StringBuffer();
			for (int i=0; i<ta.size(); i++){
				if (i==ta.size()-2){
					sb.append("Math.min("+ ta.get(i) +", "+ta.get(i+1) +")");
					for (int j=0; j<i; j++){
						sb.append(")");
					}
					return sb.toString();
				}
				else {
					sb.append("Math.min("+ ta.get(i) +", ");
				}
			}			
		}
		else if (token.image=="max"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"max\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			if (ta.size()==2){
				return "Math.max("+ ta.get(0) +", "+ta.get(1) +")";
			}
			StringBuffer sb=new StringBuffer();
			for (int i=0; i<ta.size(); i++){
				if (i==ta.size()-2){
					sb.append("Math.max("+ ta.get(i) +", "+ta.get(i+1) +")");
					for (int j=0; j<i; j++){
						sb.append(")");
					}
					return sb.toString();
				}
				else {
					sb.append("Math.max("+ ta.get(i) +", ");
				}
			}		
		}
		else if (token.image=="quotient"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"quotient\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "(int)"+ ta.get(0) +"/(int)"+ta.get(1);
		}
		else if (token.image=="remainder"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"remainder\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.IEEEremainder("+ ta.get(0) +", "+ta.get(1)+")";
		}
		else if (token.image=="modulo"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"modulo\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "("+ ta.get(0) +"%"+ta.get(1)+")";
		}
		//add below to tokens
		else if (token.image=="abs"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"abs\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.abs("+ ta.get(0) +")";
		}
		else if (token.image=="yail-round"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"round\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			
			return "Math.round((float)"+ ta.get(0) +")";
		}
		else if (token.image=="yail-floor"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"floor\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.floor((double)"+ ta.get(0) +")";
		}
		else if (token.image=="yail-ceiling"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"ceiling\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.ceil((double)"+ ta.get(0) +")";
		}
		else if (token.image=="expt"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"expt\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "(int)"+ta.get(0) +"^(int)"+ta.get(1);
		}
		else if (token.image=="exp"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"exp\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.exp((double)"+ta.get(0) +")";
		}
		else if (token.image=="log"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"log\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.log((double)"+ta.get(0) +")";
		}
		else if (token.image=="sin-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"sin\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.sin((double)"+ta.get(0) +")";
		}
		else if (token.image=="cos-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"cos\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.cos((double)"+ta.get(0) +")";
		}
		else if (token.image=="tan-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"tan\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.tan((double)"+ta.get(0) +")";
		}
		else if (token.image=="asin-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"asin\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			
			return "Math.asin((double)"+ta.get(0) +")";
		}
		else if (token.image=="acos-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"acos\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.acos((double)"+ta.get(0) +")";
		}
		else if (token.image=="atan-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"atan\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.atan((double)"+ta.get(0) +")";
		}
		else if (token.image=="atan2-degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"atan2\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.atan2((double)"+ta.get(0) +", "+"(double)"+ta.get(1)+")";
		}
		else if (token.image=="radians->degrees"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"convert radians to degrees\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.toDegrees((double)"+ta.get(0)+")";
		}
		else if (token.image=="degrees->radians"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"convert degrees to radians\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.toRadians((double)"+ta.get(0) +")";
		}
		else if (token.image=="format-as-decimal"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"format as decimal\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return "new Double (String.format(\"%."+ ta.get(1) +"g%n\", "+ta.get(0)+"))";
		}
		//assume a string will be passed in
		else if (token.image=="is-number?"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"is a number?\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			//not sure about regex
			return ta.get(0)+".replaceAll(\"\\d+(.\\d+)*\", \"\").length()<1";
		}
		else if(token.image=="yail-not"){
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> ta = getArgs();
			while (!token.image.contentEquals("\"not\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			//not sure about regex
			return "!"+ta.get(0);
		}
		else if (token.image=="<" || token.image==">" || token.image=="<=" || token.image==">="
				|| token.image=="yail-equal?" || token.image=="yail-not-equal?"){
			String operator=token.image;
			if (operator.contentEquals("yail-equal?")){
				operator="==";
			}
			else if (operator.contentEquals("yail-not-equal?")){
				operator="!=";
			}
			
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			ArrayList<String> args=getArgs();
			while (!token.image.contentEquals("\"<\"") && !token.image.contentEquals("\">\"") 
					&& !token.image.contentEquals("\"<=\"")&& !token.image.contentEquals("\">=\"")
						&& !token.image.contentEquals("\"=\"")&& !token.image.contentEquals("\"not =\"")) {
				token = yailParserTokenManager.getNextToken();
			}
			return args.get(0)+operator+args.get(1);
		}
		else if (token.image=="+" || token.image=="*" || token.image=="/" || token.image=="-"){
			String operator=token.image;
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			boolean paren=false;
			ArrayList<String> args=getArgs();
			if (args.get(0).endsWith(".Text()")){
				args.set(0, "new Integer("+args.get(0)+")");
				paren=true;
			}
			//negate
			if (operator.contentEquals("-") && args.size()==1){
			//	System.out.println("here1");
					while (!token.image.contentEquals("\"negate\"")) {
						token = yailParserTokenManager.getNextToken();
					}
					return  args.get(0) +"*-1";
			}
			if (args.get(1).endsWith(".Text()")){
				args.set(1, "new Integer("+args.get(1)+")");
				paren=true;
			}
			String arg1=args.get(1);
			//System.out.println(args.get(0));
			//System.out.println(args.get(1));
			//while (!token.image.contentEquals("\"+\"") && !token.image.contentEquals("\"-\"") 
			//		&& !token.image.contentEquals("\"*\"")&& !token.image.contentEquals("\"/\"")
			///			) {
			//	token = yailParserTokenManager.getNextToken();
		//}
			if (arg1.contains("-")||arg1.contains("+")||arg1.contains("/")||arg1.contains("*")){
				return args.get(0) + operator +"(" +arg1+")";
			}
			else {
				if (paren){
					return "("+args.get(0) +operator +arg1+")";
				}
				else {
					return args.get(0) +operator +arg1;
				}
			}
		}
		else if (token.image=="random-fraction"){
			while (!token.image.contentEquals("\"random fraction\"")){
				token = yailParserTokenManager.getNextToken();
			}
			return "Math.random()";
		}
		
		else if (token.image=="random-integer"){
			if (!r){
				JVar jv=new JVar("random");
				r=true;
				jv.setType("Random");
				variables.add(jv);
			}
			token = yailParserTokenManager.getNextToken();
			token = yailParserTokenManager.getNextToken();
			//jv.setMembers();
			ArrayList<String>args=getArgs();
			while (!token.image.contentEquals("\"random integer\"")){
				token = yailParserTokenManager.getNextToken();
			}
			
			return "random.nextInt("+args.get(1)+"-"+args.get(0)+")"+"+"+args.get(0);
		}
		return "";
	}

	// get a java var, like int, string, or list
	private JVar getVar(String name) {
		JVar var = new JVar(name);
		Token token = yailParserTokenManager.getNextToken();
		if (YailParserConstants.tokenImage[token.kind].equals("<DECIMALVAL>")) {
			var.setType("int");
			var.setVal(token.image);
		} else if (token.image == "(") {
			var.setType("YailList");
			 token = yailParserTokenManager.getNextToken();
			 token= yailParserTokenManager.getNextToken();
			 token = yailParserTokenManager.getNextToken();
			 token= yailParserTokenManager.getNextToken();
			 ArrayList<String> argsArray=getArgs();
			 if (argsArray.size()>0){
				 var.setMembers(argsArray);
			 }
		} else {
			var.setType("String");
			var.setVal(token.image);
		}
		return var;
	}
	public CodeBlock getEventParamTypes(CodeBlock event){
		String type=components.get(event.getComponent()).getType();
		//types of input parameters of events go here
		if (event.getMethod().contentEquals("MessageReceived") && type.contentEquals("Texting")){
			event.addArgType("(String)");
			event.addArgType("(String)");
		}
		else if (event.getMethod().contentEquals("AfterPicture") && type.contentEquals("Camera")){
			event.addArgType("(String)");
		}
		else if (event.getMethod().contentEquals("Dragged") && type.contentEquals("Canvas")){
			event.addArgType("(Float)");
			event.addArgType("(Float)");
			event.addArgType("(Float)");
			event.addArgType("(Float)");
			event.addArgType("(Float)");
			event.addArgType("(Float)");
			event.addArgType("(Boolean)");
		}
		else if (event.getMethod().contentEquals("Touched") && type.contentEquals("Canvas")){
			event.addArgType("(Float)");
			event.addArgType("(Float)");
			event.addArgType("(Boolean)");
		}
		else if (event.getMethod().contentEquals("Touched") && type.contentEquals("ImageSprite")){
			event.addArgType("(Float)");
			event.addArgType("(Float)");
		}
		else if (event.getMethod().contentEquals("LocationChanged") && type.contentEquals("LocationSensor")){
			event.addArgType("(Double)");
			event.addArgType("(Double)");
			event.addArgType("(Double)");
		}
		return event;
	}
	public String getName() {
		return screenName;
	}

}
